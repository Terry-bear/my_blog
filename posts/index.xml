<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on terryzh&#39;s blog</title>
    <link>https://t496971418.github.io/posts/</link>
    <description>Recent content in Posts on terryzh&#39;s blog</description>
    <meta name="generator" content="Hugo 0.53" />
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jan 2019 10:57:49 +0800</lastBuildDate>
    
        <atom:link href="https://t496971418.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS数组常用方法回顾</title>
      <link>https://t496971418.github.io/posts/js%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Fri, 04 Jan 2019 10:57:49 +0800</pubDate>
      
      <guid>https://t496971418.github.io/posts/js%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%9B%9E%E9%A1%BE/</guid>
      <description>最近写JS碰到了很多对数组的处理。总结出来以便回顾。
 这里会结合一些函数式编程的思想来进行总结。
 处理全量数组数据 高频出现  map
map—&amp;gt; 返回每次函数调用的结果组成的数组[有返回值]
1 2 3 4 5 6  var baseArr = [1, 2, 3, 4, 5, 6] var dealedArr = baseArr.map(params =&amp;gt; params + 1) &amp;gt;&amp;gt;&amp;gt; [ 1, 2, 3, 4, 5, 6 ] // baseArr &amp;gt;&amp;gt;&amp;gt; [ 2, 3, 4, 5, 6, 7 ] // dealedArr    forEach
forEach—&amp;gt; 和map的区别就是forEach是没有返回值的
1 2 3 4 5 6 7  var baseArr = [1, 2, 3, 4, 5, 6] var dealedArr = [] baseArr.</description>
    </item>
    
    <item>
      <title>初探vue3.0的Proxy机制</title>
      <link>https://t496971418.github.io/posts/%E5%88%9D%E6%8E%A2vue3.0%E7%9A%84proxy%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 30 Dec 2018 15:42:49 +0800</pubDate>
      
      <guid>https://t496971418.github.io/posts/%E5%88%9D%E6%8E%A2vue3.0%E7%9A%84proxy%E6%9C%BA%E5%88%B6/</guid>
      <description>19年已经来了，尤大也在11月份宣布了改版并发布vue3.0的计划，大概的时间会在19年的年中或者年底完成稳定版的发布。在11月份的关于vue的技术讨论会上，以尤大领头的vue团队，透露了有关vue3.0比较大的变动。其中有一项是关于Proxy机制的。本文就是初探Vue3.0中的Proxy。
 一、初探Proxy？ 说到Proxy大家可能不熟悉，但是提起vue2.x版本中的Object.defineProperty,大家应该是有所了解的。
前端面试中vue常考的内容之一，必然是Object.defineProperty。
说说为什么要取代Object.defineProperty?  经常使用vue中watch的小伙伴应该知道一种情况，就是在watch数组的时候，数组内元素的变化是不会体现和在watch中实现的，只有在watch中强制添加deep属性才能进行监听和使用。
在观看了vue的源码后，发现vue经过一系列的内部处理，可以使用以下几种方法来监听数组。（Vue为什么不能检测数组变动）
push() pop() shift() unshift() splice() sort() reverse()  由于只针对了八种方法进行hack处理，其他数组方法扩展时就显得力不从心了。
 Object.defineProperty只能劫持对象的属性，因此我们需要对每个属性进行遍历。
Vue里，是通过递归以及遍历data 对象来实现对数据的监控的，如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象，不管是对操作性还是性能都会有一个很大的提升。
  相比而言，Proxy具有的优点：
 可以劫持整个对象，并返回一个新对象。 有13中劫持操作。  估计有小伙伴就要问了，ES6的规范不是已经出了很久了么，为什么Proxy没有在vue2.x的版本中实现呢。
 Proxy是es6提供的新特性，兼容性不好，最主要的是这个属性无法用polyfill来兼容
 目前Proxy并没有有效的兼容方案，未来大概会是3.0和2.0并行，需要支持IE的选择2.0
二、深入浅出Proxy?  含义 Proxy是 ES6 中新增的一个特性，翻译过来意思是&amp;rdquo;代理&amp;rdquo;，用在这里表示由它来“代理”某些操作。 Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。 Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。 使用 Proxy 的核心优点是可以交由它来处理一些非核心逻辑（如：读取或设置对象的某些属性前记录日志；设置对象的某些属性值前，需要验证；某些属性的访问控制等）。  从而可以让对象只需关注于核心逻辑，达到关注点分离，降低对象复杂度等目的。
 基本用法
let p = new Proxy(target, handler);
   target是用Proxy包装的被代理对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。 handler是一个对象，其声明了代理target 的一些操作，其属性是当执行一个操作时定义代理的行为的函数。 p是代理后的对象。当外界每次对 p 进行操作时，就会执行 handler 对象上的一些方法。  Proxy共有13种劫持操作，handler代理的一些常用的方法有如下几个：</description>
    </item>
    
    <item>
      <title>18年已过，19年，坚持维护自己的微博</title>
      <link>https://t496971418.github.io/posts/18%E5%B9%B4%E5%B7%B2%E8%BF%8719%E5%B9%B4%E5%9D%9A%E6%8C%81%E7%BB%B4%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BE%AE%E5%8D%9A/</link>
      <pubDate>Sat, 29 Dec 2018 01:07:40 +0800</pubDate>
      
      <guid>https://t496971418.github.io/posts/18%E5%B9%B4%E5%B7%B2%E8%BF%8719%E5%B9%B4%E5%9D%9A%E6%8C%81%E7%BB%B4%E6%8A%A4%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BE%AE%E5%8D%9A/</guid>
      <description> 18年，算是自己的多事之秋  18年算是自己在技术方面有沉淀的一年，遇到了好团队。
 本命年可能真的就是传说中的多事之年吧。愿19年否极泰来。
简单的做个自我介绍吧。虽然这个可能就只有我一个人在看。
算是一个来自二次元的被代码耽误的情感主播吧。嗯，就这样。
这个微博会写什么？ 主要还是做技术微博吧。分享和解决自己在工作中遇到的各种问题。本人主要从事前端开发工作，但有关架构的东西也会提及一二（咳咳，一口老血，毕竟是菜鸟，可能分享不了太高深的东西，但分享的东西都希望对你有帮助）。
总结一下：
 前端（包括VUE、React、Eletron） Node Python Golang 云开发相关（docker延伸） 自动化（自动化集成、自动化运维等） 架构（浅浅一谈）  文末的彩蛋 其实也没什么彩蛋，博主毕竟说是个情感主播，应该会涉及到一点电台的内容。但会分类，毕竟应该不是所有人都喜欢。不会显示在首页。
19年leader给博主下了个命令，说有一个想法，让博主做一个可拆卸的菜单集成插件。不知道会不会割了。不过现在先写出来。有兴趣的可以看看我的github。毕竟作为一篇自述。还是什么都写出来，以后自己看看，也觉得蛮有意思。
 好了，就这么多了。。😆
 </description>
    </item>
    
  </channel>
</rss>
